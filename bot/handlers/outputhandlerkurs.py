from aiogram import F, Router, html, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
import asyncio
import time
import json
import os
import transliterate
import os


import keyboards.keyboard as kb
import database.requests as rq

router = Router()
kurs_selections = {}
selectkurs = None


DATA_FILE_KURS = "kurs_data.json"


def load_data_kurs():
    if os.path.exists(DATA_FILE_KURS):
        with open(DATA_FILE_KURS, "r") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON –∏–∑ {DATA_FILE_KURS}. –ù–∞—á–∏–Ω–∞—è —Å –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
                return {}
    else:
        return {}
    

def save_data_kurs(data_kurs):
    with open(DATA_FILE_KURS, "w") as f:
        json.dump(data_kurs, f, indent=4)

    
def transliterate_filename(filename):
    "–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π."
    try:
        return transliterate.translit(filename, 'ru', reversed=True)
    except transliterate.exceptions.TranslitException:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é '{filename}', –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è.")
        return filename


@router.message(Command(commands='kurs'))
async def kurs_start(message: Message, bot: Bot):
    if(await rq.proverka_kurss() == None):
        await bot.send_message(message.from_user.id,'–ü–æ–∫–∞ –∫—É—Ä—Å–æ–≤ –Ω–µ—Ç')
    else:
        await bot.send_message(message.from_user.id,'ü§ì–ö—É—Ä—Å—ã: ',reply_markup=await kb.selectkeyboardkurs())


@router.callback_query(F.data.startswith('selectkurs_'))
async def kursselect(callback: CallbackQuery):
    start_time = time.time()
    end_time = start_time + 15 * 60
    await callback.answer('')
    k = []
    user_name = callback.from_user.full_name
    selectk = callback.data.split('_')[1]
    global selectkurs
    selectkurs = selectk
    # –ó–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON

    data_kurs = load_data_kurs()

    # –î–æ–±–∞–≤—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö JSON
    if str(user_name) not in data_kurs:
        data_kurs[str(user_name)] = []
    
    #–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    kurssel = await rq.get_kurs(selectkurs)
    
    for kurs in kurssel:
        #–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        transliterated_filename = transliterate_filename(kurs.nameurl)

        if transliterated_filename not in data_kurs[str(user_name)]:
          data_kurs[str(user_name)].append(transliterated_filename)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    save_data_kurs(data_kurs)

    while start_time < end_time:
        
        if user_name not in kurs_selections:
            kurs_selections[user_name] = []

        if selectk not in kurs_selections[user_name]:
            kurs_selections[user_name].append(selectk)
        k.append(kurs_selections)
        break

    await callback.message.answer(f'{html.bold('–ö—É—Ä—Å:')} {kurs.nameurl}\n{html.bold('–û–ø–∏—Å–∞–Ω–∏–µ:')} {kurs.descriptionkurs}\n{html.bold('–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö:')} {kurs.pricecardkurs}\n{html.bold('–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–≤–µ–∑–¥–∞—Ö:')} {kurs.pricestarkurs}', reply_markup=kb.payment_keyboard_kurs)


@router.callback_query(F.data.startswith('stars_kurs'))
async def buykurs(callback: CallbackQuery):
    kurssel = await rq.get_kurs(selectkurs)
    for kurs in kurssel:
        nameurl = kurs.nameurl
        descriptionkurs = kurs.descriptionkurs
        pricestar = kurs.pricestarkurs

    await callback.message.answer_invoice(
            title=nameurl,
            description=descriptionkurs,
            provider_token='',
            currency="XTR",
            payload='kurs',
            prices=[LabeledPrice(label="XTR", amount=pricestar)]
    )
    await callback.answer()


@router.pre_checkout_query()
async def pre_checkout_querykurs(event: PreCheckoutQuery) -> None:
    await event.answer(ok=True)


@router.message(F.successful_payment.invoice_payload == 'kurs')
async def successful_paymentkurs(message: Message, bot: Bot) -> None:
    kurssel = await rq.get_kurs(selectkurs)
    for kurs in kurssel:
        await message.answer(kurs.url)
    await bot.refund_star_payment(message.from_user.id, message.successful_payment.telegram_payment_charge_id)


load_dotenv()

admin_id = os.getenv('ADMIN_ID')
intadmin_id = int(admin_id)
phone = os.getenv('PHONE')


class Card_Pay_kurs(StatesGroup):
    successful_photo_kurs = State()
photo_kurs = None
clientidkurs = None


@router.callback_query(F.data.startswith('cards_kurs'))
async def payphotocheckgetkurs(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    global clientidkurs
    infopokup = callback.from_user.id
    clientidkurs = infopokup
    if callback.message.text != "—Å—Ç–æ–ø":
        await state.set_state(Card_Pay_kurs.successful_photo_kurs)
        await callback.message.answer(f'–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å—É–º–º—É —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –≥–∞–π–¥–∞ {phone}')
        await callback.message.answer('–ü—Ä–µ–∫—Ä–∏–ø–∏—Ç–µ —á–µ–∫üßæ, –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã!\n\n–ï—Å–ª–∏ –≤—ã –Ω–∞–∂–∞–ª–∏ –Ω–µ –Ω–∞ —Ç—É –∫–Ω–æ–ø–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ "—Å—Ç–æ–ø"')
    else:
        await state.clear()


@router.message(Card_Pay_kurs.successful_photo_kurs)
async def successfulphotokurs(message: Message, state: FSMContext, bot: Bot):
    if message.text != "—Å—Ç–æ–ø":
        await state.update_data(pay_photo_checkurs=message.photo[-1].file_id)
        await bot.send_message(chat_id=clientidkurs, text='–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º')
        data = await state.get_data()
        global photo_kurs
        pay_photo_checkurs = data.get('pay_photo_checkurs')
        photo_kurs = pay_photo_checkurs
        chekmessage = await bot.send_photo(chat_id=intadmin_id, caption='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:', photo=photo_kurs, reply_markup=kb.succsefull_keyboard_kurs)
        await state.clear()
        await asyncio.sleep(900)
        await chekmessage.delete()
    else: 
        await state.clear()


@router.callback_query(F.data.startswith('true_kurs'))
async def Trueanswerkurs(callback: CallbackQuery):
    await callback.answer()
    chekkeyboardtrue = await callback.message.answer('–í—ã —Ç–æ—á–Ω–æ –≤—Å–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏?', reply_markup=kb.confirmation_kurs)
    await asyncio.sleep(900)
    await chekkeyboardtrue.delete()


@router.callback_query(F.data.startswith('ok_kurs'))
async def ConfirmanswerYeskurs(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    kurssel = await rq.get_kurs(selectkurs)
    try:
        sendmessagek = await callback.message.answer('–û—Ç–ø—Ä–∞–≤–ª—è—é –∫—É—Ä—Å —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫—Éü•≥')
        for kurs in kurssel:
            await bot.send_message(chat_id=clientidkurs, text=kurs.url)
    except TelegramBadRequest as e:
        sendmessageerror = await callback.message.answer('–ö—É—Ä—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è...\n–û—à–∏–±–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¢–µ—Ö.–ê–¥–º–∏–Ω—É! –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —Ä–∞–±–æ—Ç—ã —É–∂–µ –≤–µ–¥—É—Ç—Å—è!')
        await bot.send_message(chat_id=clientidkurs, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –∫—É—Ä—Å. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —É–∂–µ –Ω–∞–¥ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø—Ä–∏—à–ª–µ–º –∫—É—Ä—Å, –∫–∞–∫ —Ä–µ—à–∏–º –¥–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É. –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!")
        print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—É—Ä—Å: {e} -> –ü–æ—Ö–æ–¥—É –æ–ø—è—Ç—å file_id —É—Å—Ç–∞—Ä–µ–ª...\n–ê–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞:{clientidkurs}\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:{kurs.nameurl}\n–ï–≥–æ —Ç–æ–≤–∞—Ä:{kurs.url}')
        # sendurl = await callback.message.answer(chat_id=clientid, text=kurs.url)
    await asyncio.sleep(900)
    await sendmessagek.delete()
    await sendmessageerror.delete()

@router.callback_query(F.data.startswith('false_kurs'))
async def Falseanswerkurs(callback: CallbackQuery):
    await callback.answer()
    chekkeyboardfalse = await callback.message.answer('–í—ã —Ç–æ—á–Ω–æ –≤—Å–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏?', reply_markup=kb.confirmation_false_kurs)
    await asyncio.sleep(900)
    await chekkeyboardfalse.delete()

@router.callback_query(F.data.startswith('yes_false_kurs'))
async def Confirmanswerkurs(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    falsecheckyesfalse = await callback.message.answer('–ü–æ–Ω—è–ª –≤–∞—Å! –°–æ–æ–±—â–∞—é –æ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!')
    await bot.send_message(chat_id=clientidkurs, text='–ê–¥–º–∏–Ω –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à –ø–ª–∞—Ç–µ–∂! –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É!')
    await asyncio.sleep(900)
    await falsecheckyesfalse.delete()


@router.callback_query(F.data.startswith('no_false_kurs'))
async def UnConfirmanswerkurs(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    chekmessagenofalse = await bot.send_photo(chat_id=intadmin_id, caption='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:', photo=photo_kurs, reply_markup=kb.succsefull_keyboard_kurs)
    await asyncio.sleep(900)
    await chekmessagenofalse.delete()


@router.callback_query(F.data.startswith('no_kurs'))
async def UnConfirmanswernokurs(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    chekmessage = await bot.send_photo(chat_id=intadmin_id, caption='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:', photo=photo_kurs, reply_markup=kb.succsefull_keyboard_kurs)
    await asyncio.sleep(900)
    await chekmessage.delete()